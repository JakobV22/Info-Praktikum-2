/*
 * main.cpp
 *
 *  Created on: 22.10.2024
 *      Author: vogel
 */
#include "Fahrzeug.h"
#include "PKW.h"
#include "Fahrrad.h"
#include <memory>
#include <vector>
#include <string.h>

extern double dGlobaleZeit = 0.0;
typedef std::unique_ptr<Fahrzeug> u_ptrFahrzeug;



std::ostream& operator<< (std::ostream& o, const Fahrzeug& f ) {
	f.vAusgeben(o);
	return o;

}

void vGesamtAusgabe1a(
		std::vector<u_ptrFahrzeug> &vecUniquePointerFahrzeugVector) {
	Fahrzeug::vKopf();
	for (dGlobaleZeit = 0.0; dGlobaleZeit < 5; dGlobaleZeit += 0.1) {

		for (auto it = vecUniquePointerFahrzeugVector.begin();
				it != vecUniquePointerFahrzeugVector.end(); ++it) {
			(*it)->vSimulieren();
			std::cout << *(*it);
			std::cout << "\n" << std::endl;
		}
	}
}
void vGesamtAusgabe2(
		std::vector<u_ptrFahrzeug> &vecUniquePointerFahrzeugVector) {

	for (auto it = vecUniquePointerFahrzeugVector.begin();
			it != vecUniquePointerFahrzeugVector.end(); ++it) {
		(*it)->vSimulieren();
		std::cout << *(*it);
		std::cout << "\n" << std::endl;
	}
}

void vAufgabe_1() {
//	Fahrzeug fF1("F0");
//	Fahrzeug *pF2 = new Fahrzeug("F2");
//	Fahrzeug *pF3 = new Fahrzeug("F3");
//
//	std::unique_ptr<Fahrzeug> pF4 = std::make_unique<Fahrzeug>("F4"); //(unique)
//	std::unique_ptr<Fahrzeug> pF5 = std::make_unique<Fahrzeug>("F5 (unique)");
//	std::shared_ptr<Fahrzeug> pF6 = std::make_shared<Fahrzeug>("F6 (shared)");
//	std::shared_ptr<Fahrzeug> pF7 = std::make_shared<Fahrzeug>("F7 (shared)");
//	std::shared_ptr<Fahrzeug> pF7x;
//	std::unique_ptr<Fahrzeug> pF4x;
//	pF4->vAusgeben();
//
//	std::cout << "\n\nAnzahl Referenzen auf F7: " << pF7.use_count()
//			<< std::endl;
//	pF7x = pF7;
//	std::cout << "Anzahl Referenzen auf F7 (nach Zuweisung pF7x): "
//			<< pF7.use_count() << "\n\n" << std::endl;
//
//	// pF4x = pF4; gibt natürlich Fehelermeldung, da unique pointer
//
//	pF4->vAusgeben();
//	std::cout << std::endl;
//	std::vector<std::unique_ptr<Fahrzeug>> vUniqueFahrzeugVector;
//	vUniqueFahrzeugVector.push_back(move(pF4));		//move notwendig
//	vUniqueFahrzeugVector.push_back(move(pF5));
//	// vUniqueFahrzeugVector.push_back(pF6); nicht in unique_ptr vektor speicherbar, da shared pointr
//	// vUniqueFahrzeugVector.push_back(pF7);
//	vUniqueFahrzeugVector.clear();
//
//	std::vector<std::shared_ptr<Fahrzeug>> vSharedFahrzeugVector;
//
//	//vSharedFahrzeugVector.push_back(pF4); ebenfalls falscher typ (analog siehe oben)
//	//vSharedFahrzeugVector.push_back(pF5);
//	std::cout << "Anzahl Referenzen auf F6 (vor Speicherung im Vektor): "
//			<< pF6.use_count() << std::endl;
//	std::cout << "Anzahl Referenzen auf F7 (vor Speicherung im Vektor): "
//			<< pF7.use_count() << std::endl;
//	vSharedFahrzeugVector.push_back(pF6);
//	vSharedFahrzeugVector.push_back(move(pF7));
//	std::cout << "Anzahl Referenzen auf F6 (nach Speicherung im Vektor): "
//			<< pF6.use_count() << std::endl;
//	std::cout << "Anzahl Referenzen auf F7 (nach Speicherung im Vektor): "
//			<< pF7.use_count() << std::endl;
//
//	delete pF2;
//	delete pF3;
//
}
void vAufgabe_1a() {

	std::vector<u_ptrFahrzeug> vecFahrzeugVector;
	std::string sNameInput;
	std::string sGeschwindigkeitInput;
	for (int i = 0; i < 3; i++) {

		std::cout << "Name :" << std::endl;
		std::cin >> sNameInput;
		std::cout << "MaxGeschwindigkeit: " << std::endl;
		std::cin >> sGeschwindigkeitInput;
		std::cout << "\n --- \n" << std::endl;
		double dMaxGeschwindikeitInput = stod(sGeschwindigkeitInput);
		u_ptrFahrzeug fNewFahrzeug = std::make_unique<Fahrzeug>(sNameInput,
				dMaxGeschwindikeitInput);
		vecFahrzeugVector.push_back(move(fNewFahrzeug));
	}
	vGesamtAusgabe1a(vecFahrzeugVector);

}
void vAufgabe_2() {
	std::vector<u_ptrFahrzeug> vecFahrzeugVector;
	std::string sInput;
	std::cout << "Wie viele PKWs? " << std::endl;
	std::cin >> sInput;
	int iIntInput1 = stoi(sInput);
	std::cout << "Wie viele Fahrräder? " << std::endl;
	std::cin >> sInput;
	int iIntInput2 = stoi(sInput);

	for (int i = 0; i < iIntInput1; i++) {
		std::string sName = "PKW" + std::to_string(i + 1);
		std::unique_ptr<PKW> fNewPKW = std::make_unique<PKW>(sName, 100, 5);
		vecFahrzeugVector.push_back(move(fNewPKW));

	}

	for (int i = 0; i < iIntInput2; i++) {
		std::string sName = "Bike" + std::to_string(i + 1);
		std::unique_ptr<Fahrrad> fNewFahrrad = std::make_unique<Fahrrad>(sName,
				25);
		vecFahrzeugVector.push_back(move(fNewFahrrad));

	}
	Fahrzeug::vKopf();
	for (; dGlobaleZeit < 3.0; dGlobaleZeit += 0.25) {
		vGesamtAusgabe2(vecFahrzeugVector);
	}
	for (auto it = vecFahrzeugVector.begin(); it < vecFahrzeugVector.end();
			it++) {
		(*it)->dTanken();
	}
	for (; dGlobaleZeit < 5.0; dGlobaleZeit += 0.25) {
		vGesamtAusgabe2(vecFahrzeugVector);

	}
}
void vAufgabe_3(){
	std::vector<std::unique_ptr<Fahrzeug>> vecFahrzeuge;
	for (int i = 1; i<4; i++){
		std::unique_ptr<Fahrzeug> fF1 = std::make_unique<Fahrzeug>("FZ"+std::to_string(i),i*10);
		vecFahrzeuge.push_back(move(fF1));
	}
	for (int i = 1; i<4; i++){
			std::unique_ptr<PKW> fF1 = std::make_unique<PKW>("PKW"+std::to_string(i),i*10, i*3);
			vecFahrzeuge.push_back(move(fF1));
		}

	for (int i = 1; i<4; i++){
			std::unique_ptr<Fahrrad>  fF1 = std::make_unique<Fahrrad>("FR"+std::to_string(i),i*10);
			vecFahrzeuge.push_back(move(fF1));
		}
	Fahrzeug::vKopf();
	dGlobaleZeit+=0.5;
	for (auto it = vecFahrzeuge.begin(); it < vecFahrzeuge.end(); it++){
		std::cout << *(*it) << std::endl;
		(*it)->vSimulieren();
	}
	//alles quatsch mit dereferenzierung
//		std::cout << " 0 kleiner 1:" << (vecFahrzeuge[0] < vecFahrzeuge[1]) << std::endl;
//		std::cout << " 1 kleiner 0:" << (vecFahrzeuge[1] < vecFahrzeuge[0]) << std::endl;
//		std::cout << " 7 kleiner 8:" << (vecFahrzeuge[7] < vecFahrzeuge[8]) << std::endl;
//		*(vecFahrzeuge[2].get()) = *(vecFahrzeuge[0].get());
//		*(vecFahrzeuge[0]) = *(vecFahrzeuge[1]);
//		(*vecFahrzeuge[5]) = *(vecFahrzeuge[0]);
//
//
//
//
//		Fahrzeug::vKopf();
//			for (auto it = vecFahrzeuge.begin(); it < vecFahrzeuge.end(); it++){
//				std::cout << *(*it) << std::endl;
//
//			}


}

int main() {

vAufgabe_3();

}

